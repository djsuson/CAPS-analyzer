/***************************************************************************
 *   matrixdata.h                                                          *
 *   Copyright (C) 2008 by Daniel Suson                                    *
 *   suson@calumet.purdue.edu                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class provides the functionality needed for two dimensional data   *
 * sets                                                                    *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#ifndef _MATRIXDATA_H_
#define _MATRIXDATA_H_

#include <vector>
#include <string>
#include <math.h>

#include "basedata.h"

template <typename _Type> class matrixData : public baseData {

  public:
    matrixData();
    matrixData(int cols, int rows, FILETYPE dataID = fileType::InputData);
    matrixData(matrixData<_Type> *from);
    ~matrixData() {reset();}
  
  public:
    // define inherited methods first

    /**
     * print data
     */
    void print();

    // define specific methods next

    /**
     * access data vector
     */
    std::vector<std::vector<_Type> > roAccess() const {return m_data;}
    std::vector<std::vector<_Type> > rwAccess()       {return m_data;}


    /**
     * overload [] operator
     */
    std::vector<_Type>& operator[](long i) {return m_data[i];}
   
    /**
     * overload = operator
     */
    matrixData<_Type>& operator=(const matrixData<_Type>& other);

    /**
     * initialize matrix to zeros
     */
    int initialize(void);

    /**
     * access map orientation
     */
    void        orientation(ORIENTATION type) {m_orientation = type;}
    ORIENTATION orientation() const           {return m_orientation;}

    /**
     * access map coordinate system
     */
    void        coordSystem(COORDSYSTEM type) {m_coords = type;}
    COORDSYSTEM coordSystem() const           {return m_coords;}

    /**
     * access matrix format
     */
    void format(FORM format) {m_matrixFormat = format;}
    FORM format() const      {return m_matrixFormat;}

    /**
     * access matrix type
     */
    void   matrixType(MTYPES type) {m_matrix = type;}
    MTYPES matrixType() const      {return m_matrix;}

    /**
     * access data size
     */
    void   RARes(double res)   { m_resRA = res; }
    double RARes() const       { return m_resRA;}
    void   DecRes(double res)  { m_resDec = res; }
    double DecRes() const      { return m_resDec;}

    /**
     * convert angles to bins
     */
    inline void angle2bin(double theta,double phi,long& x,long& y) {
      /*
        Normalizes angles to a value between 0 and 0.999....
        Angles which are under or over standard ranges are addressed:
        Dec (theta) is mirrored and RA (phi) is wrapped--conditonal on hemisphere.
        These are then converted to an array location.
      */
      phi = (phi + 180.0) /360.0;
      theta = (90.0 - theta) / 180.0;

      if (((int)theta) % 2) {
        if (theta < 0)
          theta = 1.0 + theta - (int)theta; // i.e 180.0 degrees + fmod(theta)
        else {
          theta = 1.0 - theta + (int)theta; // i.e. 180.0 degrees - fmod(theta)
          phi += 0.50; // quadrant swap on movement into positive odd hemisphere.
        }
      }
      else {
        if (theta < 0) {
          theta = (int)theta - theta; // i.e. -fmod(theta)
          phi += 0.50; // quadrant swap on movement into negative even hemisphere.
        }
        else
          theta = theta - (int)theta; // fmod().
      }
      phi = ((phi < 0) ? 1.0 : 0) + phi - (int)phi;

      x = (long)(phi * m_cols);
      y = (long)(theta * m_rows);
    }

    /**
     * convert bins to angles
     */
    inline void bin2angle(long x,long y,double& theta,double& phi) {
      theta = 90.0 - (((double)y / m_rows) * 180.0);
      phi = -180.0 + (((double)x / m_cols) * 360.0);
    }

    void        EgretMinEnergy(int energy) {m_EgretMinE = energy;}
    int         EgretMinEnergy() const     {return m_EgretMinE;}
    void        EgretMaxEnergy(int energy) {m_EgretMaxE = energy;}
    int         EgretMaxEnergy() const     {return m_EgretMaxE;}
    void        EgretPixels(int nPixels)   {m_EgretPixels = nPixels;}
    int         EgretPixels() const        {return m_EgretPixels;}
    std::string EgretUnit() const          {return m_EgretUnit;}

  private:
    /**
     * reset data vector
      */
    void reset();

protected:
    std::vector<std::vector<_Type> >  m_data;
    double                            m_resRA;
    double                            m_resDec;
    ORIENTATION                       m_orientation;
    COORDSYSTEM                       m_coords;
    FORM                              m_matrixFormat;
    MTYPES                            m_matrix;
    int                               m_EgretMinE;
    int                               m_EgretMaxE;
    int                               m_EgretPixels;
    std::string                       m_EgretUnit;
};

template <typename _Type> matrixData<_Type>::matrixData()
                                           :baseData() {
  m_nDimensions = 2;
  m_resRA = 0;
  m_resDec = 0;
  m_orientation = Astronomical;
  m_coords = RAdec;
}

template <typename _Type> matrixData<_Type>::matrixData(int cols, int rows, FILETYPE dataID)
                                            :baseData() {
  m_nDimensions = 2;
  m_cols = cols;
  m_rows = rows;
  m_orientation = Astronomical;
  m_coords = RAdec;
  m_resRA = 0;
  m_resDec = 0;
  m_datatype = dataID;
}

template <typename _Type> matrixData<_Type>::matrixData(matrixData<_Type> *from)
                                            : baseData((baseData*) from) {

  int col, row;
  m_cols = from->cols();
  m_rows = from->rows();
  initialize();
//  for (col = 0; col < m_cols; ++col)
//    for (row = 0; row < m_rows; ++row)
//      m_data[col][row] = (from->access())[col][row];
  m_data = from->roAccess();

  m_resRA        = from->RARes();
  m_resDec       = from->DecRes();
  m_orientation  = from->orientation();
  m_coords       = from->coordSystem();
  m_matrixFormat = from->format();
  m_matrix       = from->matrixType();
  m_EgretMinE    = from->EgretMinEnergy();
  m_EgretMaxE    = from->EgretMaxEnergy();
  m_EgretPixels  = from->EgretPixels();
  m_EgretUnit    = from->EgretUnit();
}

template <typename _Type> void matrixData<_Type>::print() {

}

//template <typename _Type> matrixData< _Type >& matrixData<_Type>::operator=(const matrixData<_Type >& other) {
template <typename _Type> matrixData<_Type>& matrixData<_Type>::operator=(const matrixData<_Type >& other) {
  int col, row;

  // basedata variables
  baseData::operator=((baseData&) other);
/*
  m_datatype     = other.dataType();
  m_maptype      = other.mapType();
  m_spectrumtype = other.spectrumType();
  m_format       = other.fileFormat();
  m_observatory  = other.instrument();
  m_nDimensions  = other.dimensions();
  m_rows         = other.rows();
  m_cols         = other.cols();
  m_slices       = other.slices();
  m_parts        = other.parts();
  m_maxValue     = other.maxValue();
  m_minValue     = other.minValue();
  m_maxIndex     = other.maxIndex();
  m_minIndex     = other.minIndex();
  m_maxBin       = other.maxBin();
  m_minBin       = other.minBin();
  m_bitpix       = other.bitpix();
  m_fileName     = other.fileName();
//  m_showProgress = other.showProgress();
//  m_uiObject     = other.userInterface();
//  m_updateFunc   = other.updateFunction();
*/
  initialize();
//  for (col = 0; col < m_cols; ++col)
//    for (row = 0; row < m_rows; ++row)
//      m_data[col][row] = (other.access())[col][row];
  m_data = other.roAccess();

  m_resRA        = other.RARes();
  m_resDec       = other.DecRes();
  m_orientation  = other.orientation();
  m_coords       = other.coordSystem();
  m_matrixFormat = other.format();
  m_matrix       = other.matrixType();
  m_EgretMinE    = other.EgretMinEnergy();
  m_EgretMaxE    = other.EgretMaxEnergy();
  m_EgretPixels  = other.EgretPixels();
  m_EgretUnit    = other.EgretUnit();

  return *this;
}

template <typename _Type> int matrixData<_Type>::initialize() {
  int col, row;
  unsigned long long int numOps, updateUnit, currOp = 0;
  numOps =  m_rows * m_cols;
  updateUnit = numOps / 100;
  if(updateUnit < 1) updateUnit = 1;

  m_data.resize(m_cols);
  for (col = 0; col < m_cols; ++col) {
    m_data[col].resize(m_rows);
    for (row = 0; row < m_rows; ++row) {
      m_data[col][row] = 0;
//      if(m_showProgress && !(currOp % updateUnit))
//        informProgress(currOp / updateUnit);
      currOp++;
    }
  }
  m_maxValue = 0.0;
  m_minValue = 0.0;
  m_maxIndex = {m_cols, m_rows, 0};
  m_initialized = true;

  return currOp;
}

template <typename _Type> void matrixData<_Type>::reset() {
  for (int col = 0; col < m_cols; ++col)
    m_data[col].clear();
  m_data.clear();
  baseData::reset();
}

#endif
