/***************************************************************************
 *   vectordata.cpp                                                        *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   daniel.suson@purduecal.edu                                            *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class provides the functionality needed for one dimensional data   *
 * sets                                                                    *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
//#ifndef _VECTORDATA_CPP_
//#define _VECTORDATA_CPP_
#if 0

#include <fstream>
#include <math.h>
#include <string>
#include <valarray>

#include "vectordata.h"

template <typename _Type> vectorData<_Type>::vectorData()
                                           : baseData() {
  m_pixelScheme = NotPixelized;
  m_transformerScheme = NotTransformed;
  m_layout = Unordered;
  m_sides = 0;
  m_maskIndex = 0;
  m_binned = false;
}

template <typename _Type> vectorData<_Type>::vectorData(int x, FILETYPE dataID)
                                           : baseData() {
  m_pixelScheme = NotPixelized;
  m_transformerScheme = NotTransformed;
  m_layout = Unordered;
  m_nDimensions = 1;
  m_rows = x;
  m_datatype = dataID;
  m_sides = 0;
  m_maskIndex = 0;
  m_binned = false;
  initialize();
}

template <typename _Type> vectorData<_Type>::vectorData(vectorData<_Type> *from)
                                           : baseData((baseData*) from) {
  int j;
  m_rows = from->rows();
  initialize();
  for (j = 0; j < m_rows; ++j)
    m_data[j] = (from->access())[j];
  
  m_pixelScheme       = from->pixelScheme();
  m_layout            = from->layout();
  m_transformerScheme = from->transformerScheme();
  m_sides             = from->sides();
  m_nPixels           = from->numberOfPixels();
  m_maskIndex         = from->maskIndex();
  m_binned            = from->binned();
}

template <typename _Type> vectorData<_Type>& vectorData<_Type>::operator=(const vectorData<_Type> &other) {
  int i;

  // basedata variables
  baseData::operator=(&other);
/*
  m_datatype     = other.dataType();
  m_maptype      = other.mapType();
  m_spectrumtype = other.spectrumType();
  m_format       = other.fileFormat();
  m_observatory  = other.instrument();
  m_nDimensions  = other.dimensions();
  m_rows         = other.rows();
  m_cols         = other.cols();
  m_slices       = other.slices();
  m_parts        = other.parts();
  m_maxIndex     = other.maxIndex();
  m_minIndex     = other.minIndex();
  m_maxValue     = other.maxValue();
  m_minValue     = other.minValue();
  m_bitpix       = other.bitpix();
  m_fileName     = other.fileName();
//  m_showProgress = other.showProgress();
//  m_uiObject     = other.userInterface();
//  m_updateFunc   = other.updateFunction();
*/
  m_rows = other.rows();
  initialize();
  for (i = 0; i < m_rows; ++i)
    m_data[i] = (other.access())[i];

  m_pixelScheme       = other.pixelScheme();
  m_layout            = other.layout();
  m_transformerScheme = other.transformerScheme();
  m_sides             = other.sides();
  m_nPixels           = other.numberOfPixels();
  m_maskIndex         = other.maskIndex();
  m_binned            = other.binned();

  return *this;
}

template <typename _Type> void vectorData<_Type>::print() {

}

template <typename _Type> int vectorData<_Type>::initialize()
{
  int j = 0;
  unsigned long long int numOps, updateUnit, currOp = 0;
  numOps =  m_rows;
  updateUnit = numOps / 100;
  if(updateUnit < 1) updateUnit = 1;

  m_data.resize(m_rows);
  for (j = 0; j < m_rows; ++j) {
    m_data[j] = 0;
//    if(m_showProgress && !(currOp % updateUnit))
//      informProgress(currOp / updateUnit);
    currOp++;
  }

  m_minIndex = {0, 0, 0};
  m_maxIndex = {1, m_rows, 0};
  m_initialized = true;

  return currOp;
}

template <typename _Type> void vectorData<_Type>::reset() {
  m_data.clear();
  baseData::reset();
}
#endif
