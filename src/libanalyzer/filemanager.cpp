/***************************************************************************
 *   filemanager.cpp                                                       *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   daniel.suson@purduecal.edu                                            *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * Interface for all file manager types.                                   *
 *                                                                         *
 * Subclasses shall implement two constructors:                            *
 *                                                                         *
 *    <fileclass> (const char *load_filename);                             *
 *    <fileclass> (baseData *data, const char *save_filename);             *
 *                                                                         *
 * These will load and save data, respectively. The "save"                 *
 * constructor can assume the proper FILETYPE has been set inside the      *
 * baseData object...                                                      *
 *                                                                         *
 * In all cases the subclass shall insure that the opened file is closed   *
 * when its destructor is called.                                          *
 *                                                                         *
 * If a property does not exist for a certain file, the subclass           *
 * shall assign the empty value (for enum types), and 0 or 1 to valued     *
 * types, which ever makes sense: e.g. dimensional values cannot be less   *
 * than one if ANY file data exists.                                       *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#include "filemanager.h"

fileManager::fileManager() {
  m_updateFunc = 0;
  m_uiObject = 0;
  m_dimensions = 0;
  m_rows = 0;
  m_cols = 0;
  m_slices = 0;
  m_parts = 0;
      
  m_minSlice = 0;
  m_maxSlice = 0;
  for (int i = 0; i< MAX_SLICES;++i) {
    m_minE[i] = 0;
    m_maxE[i] = 0;
  }
  m_fileFormat = None;
  m_err = noErrors;
  m_filename = 0;
}

fileManager::fileManager(fileManager* from) {
  m_showProgress = from->showProgress();
  m_updateFunc = from->updateFunction();
  m_uiObject = from->userInterface();
  m_dimensions = from->dimensions();
  m_rows = from->rows();
  m_cols = from->cols();
  m_slices = from->slices();
  m_parts = from->parts();

  m_minSlice = from->minSlice();;
  m_maxSlice = from->maxSlice();;
  for (int i = 0; i< MAX_SLICES;++i) {
    m_minE[i] = from->min_energy(i);
    m_maxE[i] = from->max_energy(i);;
  }
  m_fileFormat = from->fileFormat();
  m_err = from->error();
  m_filename = from->fileName();
}

fileManager& fileManager::operator=(fileManager& other) {
  m_showProgress = other.showProgress();
  m_updateFunc = other.updateFunction();
  m_uiObject = other.userInterface();
  m_dimensions = other.dimensions();
  m_rows = other.rows();
  m_cols = other.cols();
  m_slices = other.slices();
  m_parts = other.parts();

  m_minSlice = other.minSlice();;
  m_maxSlice = other.maxSlice();;
  for (int i = 0; i< MAX_SLICES;++i) {
    m_minE[i] = other.min_energy(i);
    m_maxE[i] = other.max_energy(i);;
  }
  m_fileFormat = other.fileFormat();
  m_err = other.error();
  m_filename = other.fileName();

  return *this;
}

float fileManager::min_energy(int i) {
  if (i > MAX_SLICES || i < 0) {
    m_err = fileEnergyArrayError;
    return -1.0;
  }

  return m_minE[i];
}

float fileManager::max_energy(int i) {
  if (i > MAX_SLICES || i < 0) {
    m_err = fileEnergyArrayError;
    return -1.0;
  }

  return m_maxE[i];
}

void fileManager::min_energy(int i, float E) {
  if (i > MAX_SLICES || i < 0) {
    m_err = fileEnergyArrayError;
  }

  m_minE[i] = E;
}

void fileManager::max_energy(int i, float E){
  if (i > MAX_SLICES || i < 0) {
    m_err = fileEnergyArrayError;
  }

  m_maxE[i] = E;
}

std::string fileManager::errorDescription(ERRORCODES value) {
  m_err = value;
  if (value > noFileError || value < fileResError)
    m_err = valueOutOfRange;
  m_errDetail = errorText[m_err];

  return m_errDetail;
}

/*
void fileManager::setProgressFunc(void* uiObject,void (*func)(void*,int, const char*)) {
  m_uiObject = uiObject;
  m_updateFunc = func;
  if(m_uiObject && m_updateFunc)
    m_showProgress = true;
}
*/

void fileManager::updateProgress(int value) {
  m_showProgress.emit(value);
}

sigc::signal<void(int)> fileManager::signalProgress() {
  return m_showProgress;
}
