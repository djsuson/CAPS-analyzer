/***************************************************************************
 *   atypes.h                                                              *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   daniel.suson@purduecal.edu                                            *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This header provides the definitions for various enumerated lists used  *
 * by the data classes.                                                    *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#ifndef __ATYPES_H__
#define __ATYPES_H__

#include <string>

enum data_type {NONE = 0, INT, FLOAT, DOUBLE, STRING, DATATYPE_LIMIT};
typedef data_type DATATYPE;

/**
 * all associated types -- used for adding/removing specific data structures
 */
enum class allTypes {
  Null = 0,
  InputData, InputWeights, WeightedData,
  InputNoise, InputFilter, InputBeam,
  PixelizedData, PixelizedWeights, WeightedPixel, PixelOccupancy,
  PixelizedNoise, PixelizedFilter, PixelizedBeam,
  InverseData, InverseWeights, WeightedInverse,
  InverseNoise, InverseFilter, InverseBeam,
  MAP_LIMIT,
  TransformedData, TransformedWeights, WeightedTransform,
  TransformedNoise, TransformedFilter, TransformedBeam,
  SpectralData, EnsembleData,
  GRAPH_LIMIT,
  AlmData, AlmWeights,
  AlmNoise, AlmFilter, AlmBeam,
  TRANSFORM_LIMIT,
  BinCouplingMatrix, ModeCouplingMatrix,
  InverseBinMatrix, InverseModeMatrix,
  FILETYPE_LIMIT,
  InputDataMap, InputWeightsMap, WeightedDataMap,
  InputNoiseMap, InputFilterMap, InputBeamMap,
  PixelizedDataMap, PixelizedWeightsMap, WeightedPixelMap, PixelOccupancyMap,
  PixelizedNoiseMap, PixelizedFilterMap, PixelizedBeamMap,
  InverseDataMap, InverseWeightsMap, WeightedInverseMap,
  InverseNoiseMap, InverseFilterMap, InverseBeamMap,
  ASSOCIATEMAP_LIMIT,
  TransformedDataSpectrum, TransformedWeightsSpectrum, WeightedTransformSpectrum,
  TransformedNoiseSpectrum,TransformedFilterSpectrum, TransformedBeamSpectrum,
  SpectralDataSpectrum, EnsembleDataSpectrum,
  ASSOCIATEDSPECTRUM_LIMIT,
  fileIO, Mapping, Graphing, Pixelization, Transformation, PseudoSpectrum,
  ALLTYPE_LIMIT
};
typedef allTypes ALLTYPES;

/**
  * data file types
  */
enum class fileType {
  Null = 0,
  InputData, InputWeights, WeightedData,
  InputNoise, InputFilter, InputBeam,
  PixelizedData, PixelizedWeights, WeightedPixel, PixelOccupancy,
  PixelizedNoise, PixelizedFilter, PixelizedBeam,
  InverseData, InverseWeights, WeightedInverse,
  InverseNoise, InverseFilter, InverseBeam,
  MAP_LIMIT,
  TransformedData, TransformedWeights, WeightedTransform,
  TransformedNoise, TransformedFilter, TransformedBeam,
  SpectralData, EnsembleData,
  GRAPH_LIMIT,
  AlmData, AlmWeights,
  AlmNoise, AlmFilter, AlmBeam,
  TRANSFORM_LIMIT,
  BinCouplingMatrix, ModeCouplingMatrix,
  InverseBinMatrix, InverseModeMatrix,
  FILETYPE_LIMIT
};
typedef fileType FILETYPE;

/**
 * generic data file types
 */
enum genericType {NoGeneric = 0, Data, Weights, Noise, Filter, Beam};
typedef genericType GENERICTYPE;

/**
 * control data types
 */
enum controlType {Empty = 0, Uniform, Regional, Delta, Gaussian, Checker, Harmonic, CONTROL_LIMIT};
typedef controlType CONTROLTYPE;

/**
  * data creation operations
  */
enum m_op {Add = 0, Subtract, Scale, Replace, Invert, Mirror, OP_LIMIT};
typedef m_op M_OP;

/**
  * associated maps
  */
enum class associatedMap {
  Null = 0,
  InputDataMap, InputWeightsMap, WeightedDataMap,
  InputNoiseMap, InputFilterMap, InputBeamMap,
  PixelizedDataMap, PixelizedWeightsMap, WeightedPixelMap, PixelOccupancyMap,
  PixelizedNoiseMap, PixelizedFilterMap, PixelizedBeamMap,
  InverseDataMap, InverseWeightsMap, WeightedInverseMap,
  InverseNoiseMap, InverseFilterMap, InverseBeamMap,
  ASSOCIATEDMAP_LIMIT
};
typedef associatedMap ASSOCIATEDMAP;

enum typeOfMap {Blank = 0, Mollweide, Aitoff, Gnomonic, TYPEOFMAP_LIMIT};
typedef typeOfMap MAPTYPE;

enum colorScheme {Dark = 0, Linear, Log, SuperLog, COLORSCHEME_LIMIT};
typedef colorScheme COLORSCHEME;

/**
  * associated spectra
  */
enum class associatedSpectrum {
  Null = 20,
  TransformedDataSpectrum, TransformedWeightsSpectrum, WeightedTransformSpectrum,
  TransformedNoiseSpectrum,TransformedFilterSpectrum, TransformedBeamSpectrum,
  SpectralDataSpectrum, EnsembleDataSpectrum,
  ASSOCIATEDSPECTRUM_LIMIT
};
typedef associatedSpectrum ASSOCIATEDSPECTRUM;

/**
 * data manipulation engines
 */
enum class dataEngines {Null = 0, fileIO, Mapping, Graphing, Pixelization, Transformation, PseudoSpectrum};
typedef dataEngines DATAENGINES;

/**
  * data file formats
  */
enum format { None = 0, Fits, Block, CSV, HDF5, FORMAT_LIMIT };
typedef format FORMAT;

/**
 * coordinate frame of reference
 */
enum coordSystem {NoCoords = 0, RAdec, galLatLong, terrLatLong, COORDSYSTEM_LIMIT };
typedef coordSystem COORDSYSTEM;

/**
  * name of "instrument" that generated data
  */
enum observatory {Unknown = 0, Analyzer, Egret, Fermi, Sloan, Telescope_Array, Auger, Kascade, Delve, OBSERVATORY_LIMIT};
typedef observatory OBSERVATORY;

enum fitsType {
  fitsUndef  = 0,
  fitsByte   = 8,
  fitsInt16  = 16,
  fitsInt32  = 32,
  fitsInt64  = 64,
  fitsFloat  = -32,
  fitsDouble = -64
};
typedef fitsType FITSTYPE;

/**
 * read/write modes
 */
enum RWMode {
  Read = 0,
  Write = 1
};

/**
* pixelization scheme used
*/
enum pixelScheme {NotPixelized = 0, HealPIX, PIXELIZER_LIMIT};
typedef pixelScheme PIXELSCHEME;

/**
* healPIX layout types
*/
enum layout {Unordered = 0, Ring, Nest};
typedef layout LAYOUT;

/**
* transformer scheme used
*/
enum transformerScheme {NotTransformed = 0, Rsht, TRANSFORMER_LIMIT};
typedef transformerScheme TRANSFORMERSCHEME;

/**
 * transformation type
 */
enum transformerTypes {transWindowFunction, transDataMap, transInverseMap};
typedef transformerTypes TRANSFORMERTYPES;

/**
* map layout
* longitude incrementing convention is
* astronomical increases right to left
* terrestrial increases left to right
*/
enum orientation {NoOrientation, Astronomical, Terrestrial, ORIENTATION_LIMIT};
typedef orientation ORIENTATION;

/**
* matrix form
*/
enum formats {Mode, Bin};
typedef formats FORM;

/**
* matrix type
*/
enum matrices {coupling, inverse};
typedef matrices MTYPES;

/**
 * data sequence
 */
enum sequence {
  noSky = 0, setSky, mapSky,
  pixelize, mapPixel,
  transform, graphTransform,
  invert, mapInverse,
  powerSpectrum, graphPowerSpectrum,
  DONE, ABORT, SEQUENCE_LIMIT
};
typedef sequence SEQUENCE;

/**
 * error codes
 */
enum errorCodes {
    noErrors = 0,
    overflowError = -1,
    runtimeError = -2,
    exceptionError = -3,
    unspecifiedCreationError = -4,
    functionParameterError = -5,
    noDataError = -6,
    noFileError = -7,
    fileNameError = -8,
    fileInvalidError = -9,
    fileReadError = -10,
    fileCreateError = -11,
    fileWriteError = -12,
    fileNoKeyError = -13,
    fileSliceError = -14,
    fileEnergyError = -15,
    fileEnergyArrayError = -16,
    fileResError = -17,
    fileFitsError = -18,
    fileCsvError = -19,
    incompleteTableWrittenError = -20,
    dataMismatchError = -21,
    resolutionMismatchError = -22,
    unimplementedError = -23,
    undefinedSizeError = -24,
    incompleteDatasetError = -25,
    mergedDatasetsError = -26,
    noDatamapError = -27,
    noDatagraphError = -28,
    noMapperError = -29,
    noGrapherError = -30,
    noPixelizerError = -31,
    noTransformerError = -32,
    noSpectraError = -33,
    valueOutOfRange = -34,
    undefinedError = -99,
    ERROR_LIMIT
};
typedef errorCodes ERRORCODES;

static std::string errorText[] = {
  "No error",
  "Overflow creation error",
  "Runtime creation error",
  "Exception creation error",
  "Unspecified creation error",
  "Invalid or missing function parameter",
  "Invalid or undefined data object",
  "Data file not found",
  "Bad file name",
  "File was not found",
  "Encountered error on read",
  "File could not be created",
  "Encountered error on write",
  "Key was not found",
  "Error with energy slices",
  "Error with energy range",
  "Out of range energy array value",
  "No angular resolution specified"
  "Fits file error",
  "Incomplete data table written."
  "Incompatible data type",
  "Mismatched angular resultion",
  "Selected option is currently unimplemented",
  "Data objects necessary for the operation do not have a defined size",
  "Data objects necessary for the operation are missing or incomplete",
  "Data and mask objects merged together and cannot be isolated",
  "Invalid or undefined map",
  "Invalid or undefined graph",
  "Invalid or undefined map maker",
  "Invalid or undefined graph manager",
  "Invalid or undefined pixelizer",
  "Invalid or undefined transformer",
  "Invalid or undefined power spectra",
  "Inputted value is out of range",

  "Undefined error"
};

static std::string dataTypeNames[] = {
  "No Data",
  "Raw Data",
  "Raw Data Mask",
  "Raw Masked Data",
  "Raw Noise Data",
  "Raw Filter Data",
  "Raw Beam Data",
  "Pixelized Data",
  "Pixelized Mask",
  "Pixelized Masked Data",
  "Number of Data Points per Pixel",
  "Pixelized Noise Data",
  "Pixelized Filter Data",
  "Pixelized Beam Data",
  "Inverse Data",
  "Inverse Mask",
  "Inversed Masked Data",
  "Inverse Noise Data",
  "Inverse Filter Data",
  "Inverse Beam Data",
  "End of Mappable Data",
  "Transformed Data",
  "Transformed Mask",
  "Transformed Masked Data",
  "Transformed Noise Data",
  "Transformed Filter Data",
  "Transformed Beam Data",
  "Power Spectrum",
  "End of Graphable Data",
  "Alm Matrix",
  "Mask Alm Matrix",
  "Noise Alm Matrix",
  "Filter Alm Matrix",
  "Beam Alm Matrix",
  "End of Transformed Data",
  "Bin-Bin Coupling Matrix",
  "Mode-Mode Coupling Matrix",
  "Inverse Bin-Bin Coupling Matrix",
  "Inverse Mode-Mode Coupling Matrix",
  "End of Data Types"
};

static std::string observatoryNames[] = {
  "Unknown",
  "Analyzer",
  "Egret",
  "Fermi",
  "Sloan",
  "Telescope_Array",
  "Auger",
  "Kascade",
  "Delve",
  "End of Observatories"
};

#endif /* __ATYPES_H__ */
