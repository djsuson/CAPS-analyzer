/****************************************************************************
                              \pixelizer.h
Description:\brief (put short description here)

Begin    : Mon Jun 6 2005
Copyright: (C) 2005 by Daniel Suson
email    : daniel.suson@tamuk.edu

-----------------------------------------------------------------------------
                                Change Log
Date       Name                Description

-----------------------------------------------------------------------------

This program was developed at Texas A&M University-Kingsville by Daniel Suson.
It is free software; you may redistribute and/or modify it under the terms
of the GNU General License as published by the Free Software Foundation;
either version 2 of the License. or (at your option) any later version.

This software evolved from work that was done by Eric Hivon at the
California Institute of Technology on the MASTER algorithm (Hivon, E.,
et al., ApJ, vol 567, p 2).  It adapts or interfaces with these packages:

HealPix         (http://www.eso.org/science/healpix/)
FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)

Any publications or presentations that use results generated by this program
must reference the fact that it was developed at Texas A&M 
University-Kingsville by Daniel Suson
***************************************************************************/

#ifndef _PIXELIZER_H_
#define _PIXELIZER_H_

#include <string>
#include <vector>

#include "atypes.h"
#include "basedata.h"
#include "vectordata.h"
//#include "pixelweights.h"

class association;

class Pixelizer {

  public:
    Pixelizer();
    Pixelizer(Pixelizer* from);
    virtual ~Pixelizer();

    /**
     * Virtual functions that must be defined by inherited classes
     **/
    virtual std::string name() const = 0;
    virtual int pixelize(association* dataClasses, long x = 0, long y = 0, int range = 0, FILETYPE type = fileType::Null) = 0;
    virtual int optimize(int points, association* dataClasses) = 0;
    virtual double calculateAverage(FILETYPE dataType, association* assoc) = 0;
    virtual double calculateVariance(FILETYPE dataType, association* assoc) = 0;
    virtual baseData* calculateAverageVector(FILETYPE dataType, association* assoc) = 0;
    virtual baseData* calculateVarianceVector(FILETYPE dataType, association* assoc) = 0;
    virtual int scale() const = 0;
    virtual void scale(int number) = 0;
    virtual void pixelLayout(LAYOUT type) = 0;
    virtual LAYOUT pixelLayout() const = 0;

    /**
     * clear pixelizer variables
     */
    void clear();

    /**
     * pixelizer scheme used
     */
    void pixelizerScheme(PIXELSCHEME type) {m_scheme = type;}
    PIXELSCHEME pixelizerScheme() {return m_scheme;}

    /**
     * flag to indicate if the Pixelizer has been configured or not
     */
    bool configured() {return m_configured;}
    void configured(bool flag) {m_configured = flag;}

    /**
     * flag to indicate if the data is to be summed or averaged in a pixelize
     */
    bool average() {return m_average;}
    void average(bool flag) {m_average = flag;}

    /**
     * flag to indicate if the data distribution or its variance around the 
     * global mean is to be displayed
     */
    bool variance() {return m_variance;}
    void variance(bool flag) {m_variance = flag;}

    /**
     * flag to indicate that the data has been pixelized
     */
    bool active() {return m_active;}
    void active(bool flag) {m_active = flag;}

  protected:
    bool               m_configured;  // flag indicating if Pixelizer is configured
    bool               m_active;      // flag indicating if Pixelizer is active
    bool               m_average;     // flag to trigger averaging of data in pixel
    bool               m_variance;    // flag to trigger showing variance data in pixel
    PIXELSCHEME        m_scheme;      // pixelization scheme used
};

#endif
