/***************************************************************************
 *   basedata.cpp                                                          *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   daniel.suson@purduecal.edu                                            *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class provides the basic functionality for all of the data classes *
 * used by the analyzer. It also does some basic data checking to          *
 * the appropriate data class for actual manipulation of the data.         *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/

#include "basedata.h"
#include <iostream>
#include <string.h>

baseData::baseData() {
  m_datatype     = fileType::Null;
  m_maptype      = associatedMap::Null;
  m_spectrumtype = associatedSpectrum::Null;
  m_format       = None;
  m_observatory  = Analyzer;
  m_nDimensions  = 0;
  m_rows         = 1;
  m_cols         = 1;
  m_slices       = 1;
  m_parts        = 1;
  m_maxIndex     = {0, 0, 0};
  m_minIndex     = {0, 0, 0};
  m_maxBin       = {0, 0, 0};
  m_minBin       = {0, 0, 0};
  m_maxValue     = 0.0;
  m_minValue     = 0.0;
  m_bitpix       = fitsUndef;
  m_fileName     = "";
  m_initialized  = false;
  m_current      = false;
//  m_showProgress = false;
//  m_uiObject     = 0;
//  m_updateFunc   = 0;
}

baseData::baseData(baseData* from) {
  m_datatype     = from->dataType();
  m_maptype      = from->mapType();
  m_spectrumtype = from->spectrumType();
  m_format       = from->fileFormat();
  m_observatory  = from->instrument();
  m_nDimensions  = from->dimensions();
  m_rows         = from->rows();
  m_cols         = from->cols();
  m_slices       = from->slices();
  m_parts        = from->parts();
  m_maxIndex     = from->maxIndex();
  m_minIndex     = from->minIndex();
  m_maxBin       = from->maxBin();
  m_minBin       = from->minBin();
  m_maxValue     = from->maxValue();
  m_minValue     = from->minValue();
  m_bitpix       = from->bitpix();
  m_fileName     = from->fileName();
  m_initialized  = from->initialized();
  m_current      = from->current();
//  m_showProgress = from->showProgress();
//  m_uiObject     = from->userInterface();
//  m_updateFunc   = from->updateFunction();
}

baseData& baseData::operator=(baseData& other) {
  m_datatype     = other.dataType();
  m_maptype      = other.mapType();
  m_spectrumtype = other.spectrumType();
  m_format       = other.fileFormat();
  m_observatory  = other.instrument();
  m_nDimensions  = other.dimensions();
  m_rows         = other.rows();
  m_cols         = other.cols();
  m_slices       = other.slices();
  m_parts        = other.parts();
  m_maxIndex     = other.maxIndex();
  m_minIndex     = other.minIndex();
  m_maxBin       = other.maxBin();
  m_minBin       = other.minBin();
  m_maxValue     = other.maxValue();
  m_minValue     = other.minValue();
  m_bitpix       = other.bitpix();
  m_fileName     = other.fileName();
  m_initialized  = other.initialized();
  m_current      = other.current();
//  m_showProgress = other.showProgress();
//  m_uiObject     = other.userInterface();
//  m_updateFunc   = other.updateFunction();

  return *this;
}

void baseData::reset() {
  m_nDimensions  = 0;
  m_rows         = 1;
  m_cols         = 1;
  m_slices       = 1;
  m_parts        = 1;
  m_maxIndex     = {0, 0, 0};
  m_minIndex     = {0, 0, 0};
  m_maxBin       = {0, 0, 0};
  m_minBin       = {0, 0, 0};
  m_maxValue     = 0.0;
  m_minValue     = 0.0;
  m_initialized = false;
}

double baseData::deg2rad(double deg) {
  return (deg * M_PI / 180.0);
}

double baseData::rad2deg(double rad) {
  return (rad * 180.0 / M_PI);
}

// Pass in watching object uiObject and function to call when progress bar is updated. 
//  Watching object will read from data set in callback fx.
/*
  void baseData::setProgressFunc(void* uiObject,void (*func)(void*,int,const char*)) {
  m_uiObject = uiObject;
  m_updateFunc = func;
  if(m_uiObject && m_updateFunc)
    m_showProgress = true;
}
*/
