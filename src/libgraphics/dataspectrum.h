/***************************************************************************
 *   dataspectrum.h                                                        *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   daniel.suson@purduecal.edu                                            *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#ifndef _DATASPECTRUM_H_
#define _DATASPECTRUM_H_

#include <string>
#include <vector>

#include "healpix_cxx/arr.h"
#include "../libanalyzer/vectordata.h"

class dataSpectrum {
  public:
    dataSpectrum();
    dataSpectrum(FILETYPE type);
    dataSpectrum(dataSpectrum* from);
    ~dataSpectrum() {reset();}

  public:
    /**
     * overload = operator
     */
    dataSpectrum& operator=(dataSpectrum& other);

    /**
     * access type of data being mapped
     */
    FILETYPE dataType() const {return m_dataType;}
    void dataType(FILETYPE type) {m_dataType = type;}

    /**
     * access maximum data index of map
     */
    int maxIndex() {return m_maxIndex;}
    void maxIndex(int i) {m_maxIndex = i;}

    /**
     * access minimum data index of map
     */
    int minIndex() {return m_minIndex;}
    void minIndex(int i) {m_minIndex = i;}

    /**
     * access maximum data value of map
     */
    double maxValue() const {return m_maxValue;}
    void maxValue(double n) {m_maxValue = n;}

    /**
     * access minimum data value of map
     */
    double minValue() const {return m_minValue;}
    void minValue(double n) {m_minValue = n;}

    /**
     * access aspect ratio of graph
     */
    double aspect() const {return m_aspect;}
    void aspect(double value) {m_aspect = value;}
    
    /**
     * access size of graph in X direction
     */
    long Xgraph() const {return m_Xgraph;}

    /**
     * access size of graph in Y direction
     */
    long Ygraph() const {return m_Ygraph;}

    /**
     * access page aspect
     */
    double pageAspect() const {return m_pageAspect;}
    
    /**
     * access size of page in X direction
     */
    long Xpage() const {return m_Xpage;}

    /**
     * access size of page in Y direction
     */
    long Ypage() const {return m_Ypage;}

    /**
     * access graph titles
     */
    std::string title() const {return m_title;}
    void title(std::string value);
    std::string xtitle() const {return m_xtitle;}
    void xtitle(std::string value) {m_xtitle = value;}
    std::string ytitle() const {return m_ytitle;}
    void ytitle(std::string value) {m_ytitle = value;}

    int size() {return m_graph.size();}

    /**
     * access graph
     */
    arr<double>& graph() {return m_graph;}
   
    /**
     * create graph array and initialize to zero
     */
    long initialize() {return initialize(m_Xpage,m_Ypage);} // use default values
    long initialize(long x,long y);

    /**
     * reset the graph array
     */
    void reset();
   
    /**
     * Generate and transfer ownership of an RGB bitmap
     */
    unsigned char *transferRGBData();

  private:
    FILETYPE            m_dataType;
    int                 m_maxIndex;
    int                 m_minIndex;
    double              m_maxValue;
    double              m_minValue;
    long                m_Xpage;
    long                m_Ypage;
    long                m_Xgraph;
    long                m_Ygraph;
    double              m_pageAspect;
    double              m_aspect;
    std::string         m_title;
    std::string         m_xtitle;
    std::string         m_ytitle;
    arr<double>         m_graph;
};

#endif