/****************************************************************************
                              \gdalmapper.h
Description:\brief (put short description here)

Begin    : Tue Jun 7 2005
Copyright: (C) 2005 by Daniel Suson
email    : daniel.suson@tamuk.edu

-----------------------------------------------------------------------------
                                Change Log
Date       Name                Description

-----------------------------------------------------------------------------

This program was developed at Texas A&M University-Kingsville by Daniel Suson.
It is free software; you may redistribute and/or modify it under the terms
of the GNU General License as published by the Free Software Foundation;
either version 2 of the License. or (at your option) any later version.

This software evolved from work that was done by Eric Hivon at the
California Institute of Technology on the MASTER algorithm (Hivon, E.,
et al., ApJ, vol 567, p 2).  It adapts or interfaces with these packages:

HealPix         (http://www.eso.org/science/healpix/)
FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)

Any publications or presentations that use results generated by this program
must reference the fact that it was developed at Texas A&M
University-Kingsville by Daniel Suson
***************************************************************************/
#ifndef _GDALMAPPER_H_
#define _GDALMAPPER_H_

#include <ogr_spatialref.h>
#include "mapper.h"

class association;

class GDALMapper : public Mapper {

  public:
    GDALMapper();
    GDALMapper(GDALMapper* from);
    ~GDALMapper();

    /**
     * Specific mapping routine use GDAL map projections
     **/
    int makeMap(dataMap *map,FILETYPE dataTypes,association* dataClasses);

    /**
     * PROJ threading context
     **/
//    PJ_CONTEXT* threadingContext() {return m_threadingContext;}
//    void        threadingContext(PJ_CONTEXT* context) {m_threadingContext = context;}

    /**
     * GDAL selected map projection
     **/
    OGRSpatialReference*  projection() {return m_projection;}
    void projection(OGRSpatialReference* selection) {m_projection = selection;}

    /**
     * GDAL geodetic coordinate reference system
     **/
    OGRSpatialReference*  geodetic() {return m_geodetic;}
    void geodetic(OGRSpatialReference* selection) {m_geodetic = selection;}

    /**
     * GDAL transformation projection
     **/
    OGRCoordinateTransformation*  coordTransform() {return m_coordTransform;}
   void coordTransform(OGRCoordinateTransformation* transformer) {m_coordTransform = transformer;}

    /**
     * PROJ projection string
     **/
    std::string projString() {return m_projString;}
    void projString(std::string value) {m_projString = value;}

    /**
     * Clear map
     **/
    void clear();

  private:
    int makeMapHealpix(dataMap *map,FILETYPE dataTypes,association* dataClasses);

//    PJ_CONTEXT *m_threadingContext;
    OGRSpatialReference         *m_projection;
    OGRSpatialReference         *m_geodetic;
    OGRCoordinateTransformation *m_coordTransform;
//    PJ_COORD    m_geodeticCoords;
//    PJ_COORD    m_projCoords;
    std::string                  m_projString;
};

#endif
