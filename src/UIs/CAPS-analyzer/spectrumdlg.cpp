/***************************************************************************
 *   spectrumdlg.cpp                                                       *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   suson@calumet.purdue.edu                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class defines the spectrum dialog structure associated with        *
 * the Qt4 user interface.                                                 *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#include "spectrumdlg.h"
#include "ui_spectrumdlg.h"

spectrumDialog::spectrumDialog() :
                ui(new Ui::spectrumDialog) {
  /* set up the user interface first */
  ui->setupUi(this);

  ui->binCheckBox->setChecked(true);
  ui->inverseCheckBox->setChecked(false);
  ui->maskSpinBox->setValue(0);
  ui->countSpinBox->setValue(1);
  
  /* set up signals and slots */
  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &spectrumDialog::finalize);
  connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &spectrumDialog::cancel);
  connect(ui->buttonBox, &QDialogButtonBox::helpRequested, this, &spectrumDialog::help);
  
  /* initialize internal variables*/
//  currentHandle = -1;
//  dataHandle = -1;
  bin  = true;
  inverse = false;
  weigh = false;
  binSize = 1;
  mask = 0;
  dirty = false;
  isConfigured = false;
  
  /* set initially displayed values */
  ui->maskSpinBox->setValue(mask);
  ui->countSpinBox->setValue(binSize);
}

spectrumDialog::~spectrumDialog() {
  delete ui;
}

void spectrumDialog::configure() {
//  QString title, message;

  dirty = false;
//  dataHandle = analyzer_get_instance();
//  if (dataHandle < 0) {
//    title = QString(tr("Error code returned"));
//    message = QString(tr("No data chain found:\nError code is %1 - %2")).arg(dataHandle).arg(analyzer_get_error(dataHandle));
//    QMessageBox::critical(this,title,message);
//    return;
//  }
  
  if (isConfigured) {
    if (bin)
      ui->binCheckBox->setChecked(true);
    else
      ui->binCheckBox->setChecked(false);
    if (inverse)
      ui->inverseCheckBox->setChecked(true);
    else
      ui->inverseCheckBox->setChecked(false);
    ui->maskSpinBox->setValue(mask);
    ui->countSpinBox->setValue(binSize);
  }

  exec();
}

void spectrumDialog::reset() {
  ui->binCheckBox->setChecked(true);
  ui->inverseCheckBox->setChecked(false);
  ui->maskSpinBox->setValue(0);
  ui->countSpinBox->setValue(1);
  dirty = false;
  isConfigured = false;
  
//  while (currentHandle >= 0) {
//    analyzer_power_spectrum_release(currentHandle);
//    currentHandle--;
//  }
}

void spectrumDialog::validate() {
  dirty = false;  // assume nothing has changed
  
  /* determine if spectrum is to be binned */
  bool oldBin = bin;
  bin = ui->binCheckBox->isChecked();
  if (oldBin != bin)
    dirty = true;

  /* determine if inverse is to be calculated */
  bool oldInverse = inverse;
  inverse = ui->inverseCheckBox->isChecked();
  if (oldInverse != inverse)
    dirty = true;

  /* determine bin size */
  int oldBinSize = binSize;
  binSize = ui->countSpinBox->value();
  if (oldBinSize != binSize)
    dirty = true;

  /* determine if any part of the spectrum is to be masked out */
  int oldMask = mask;
  mask = ui->maskSpinBox->value();
  if (oldMask != mask)
    dirty = true;

  return;
}

/*
int spectrumDialog::computeSpectrum() {
  analyzer_power_spect_hdl ph = analyzer_get_power_spectrum();
  analyzer_hdl hdl = analyzer_get_instance();
  
  // Set spectral analyzer operational parameters
  analyzer_ps_transfer_indices(ph,hdl);
  analyzer_ps_use_inverse_coupling_matrix(ph, inverse);
  analyzer_ps_use_binning(ph, bin, binSize, weigh);
  analyzer_ps_mask_l_values_below(ph, mask);
  
  return analyzer_calcuate_power_spectrum(ph,hdl);
}

int spectrumDialog::configureInterface() {
  QString title, message;
  
  // check to see if a spectrum analyzer already exists
  if (currentHandle >= 0) {
    QMessageBox::StandardButton reply;
    title = QString(tr("Replace current spectra analyzer?"));
    message = QString(tr("A spectrum analyzer currently exists.\nDo you want to replace it?"));
    reply = QMessageBox::question(this,title,message,QMessageBox::Yes | QMessageBox::No,QMessageBox::No);
    if (reply == QMessageBox::Yes)
      analyzer_power_spectrum_release(currentHandle);
  }
  
  // create a new spectrum analyzer either way
  currentHandle = analyzer_create_power_spectrum();
  if (currentHandle < 0) {
    title = QString(tr("Error code returned"));
    message = QString(tr("The attempt to create a new spectrum analyzer failed.\nError code is %1 - %2")).arg(currentHandle).arg(analyzer_get_error(currentHandle));
    QMessageBox::critical(this,title,message);
    return currentHandle;
  }
  
  return 0;
}
*/

void spectrumDialog::finalize() {
  validate(); //check and store selections
  isConfigured = true;
  Q_EMIT spectrumReady();
  accept();
}

void spectrumDialog::help() {

}

void spectrumDialog::cancel() {
  QString title, message;
  QMessageBox::StandardButton reply;

  if (dirty) {
    title = QString(tr("Pseudo power spectrum parameters will be reset"));
    message = QString(tr("You have chosen to cancel after changing some parameters. These will be reset.\nThis will not affect any parameters stored in the pseudo power spectrum engine"));
    QMessageBox::information(this,title,message);
    reset();
    dirty = false;
  }
  Q_EMIT powerSpectrumCancelled();
  close();
}
