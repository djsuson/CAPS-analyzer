/***************************************************************************
 *   healpixdlg.cpp                                                        *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   suson@calumet.purdue.edu                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class defines the healpix dialog structure associated with         *
 * the Qt4 user interface.                                                 *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#include <math.h>

#include "healpixdlg.h"
#include "ui_healpixdlg.h"

#include "../libanalyzer/matrixdata.h"
#include "../libanalyzer/healpix.h"

#define SIDERES 0.00001

healpixDialog::healpixDialog(association* assoc)
              : ui(new Ui::healpixDialog) {
  /* set up the user interface first */
  ui->setupUi(this);

  dataAssoc = assoc;
//  pixelizer = 0;

  /* set up signals and slots */
  connect(ui->sideEdit, &QLineEdit::editingFinished, [=]() {healpixDialog::syncSides();});
//  connect(ui->resEdit, &QLineEdit::editingFinished, [=](){healpixDialog::syncResolution();});
  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &healpixDialog::finalize);
  connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &healpixDialog::cancel);
  connect(ui->buttonBox, &QDialogButtonBox::helpRequested, this, &healpixDialog::help);
  
  /* initialize internal variables*/
  deviationFlag  = false;
  averageFlag = false;
  nestedFlag = true;
  dirty = false;
  isConfigured = false;
  
  /* set initially displayed values */
  ui->averageBox->setChecked(false);
  ui->deviationBox->setChecked(false);
  ui->nestedButton->setEnabled(true);
  ui->sideEdit->clear();
  ui->sideEdit->insert(QString::number(0));
  ui->resEdit->clear();
  ui->resEdit->insert(QString::number(0.0));
  ui->resEdit->setReadOnly(true);
}

healpixDialog::~healpixDialog() {
  delete ui;
}

void healpixDialog::configure() {
  dirty = false;
//  dataAssoc->addEngine(dataEngines::Pixelization, HealPIX);
  
  if (isConfigured) {
    if (nestedFlag)
      ui->nestedButton->setEnabled(true);
    else
      ui->nestedButton->setEnabled(false);
    if (averageFlag)
      ui->averageBox->setChecked(true);
    else
      ui->averageBox->setChecked(false);
    if (deviationFlag)
      ui->deviationBox->setChecked(true);
    else
      ui->deviationBox->setChecked(false);
    ui->sideEdit->insert(QString::number(nSides));
    ui->resEdit->insert(QString::number(res));
  }
  else {
    // set up recommended resolution
    double raRes = 0.0, decRes = 0.0;
    if (dataAssoc->exists(fileType::InputWeights)) {
      raRes = dataAssoc->inputWeights()->RARes();
      decRes = dataAssoc->inputWeights()->DecRes();
    }
    if (dataAssoc->exists(fileType::InputData)) {
      raRes = dataAssoc->inputData()->RARes();
      decRes = dataAssoc->inputData()->DecRes();
    }
    double skyRes = (decRes >= raRes) ? decRes : raRes;
    int skySides = sides(skyRes);
    double logSides = log(skySides)/log(2);
    if (abs(logSides - (int)logSides) > SIDERES) {
      skySides = std::pow(2,(int)logSides);
      skyRes = resolution(skySides);
    }
    nSides = skySides;
    res = skyRes;
    ui->sideEdit->clear();
    ui->sideEdit->insert(QString::number(nSides));
    ui->resEdit->clear();
    ui->resEdit->insert(QString::number(res));
  }

  exec();
}

void healpixDialog::reset() {
  ui->nestedButton->setEnabled(true);
  ui->averageBox->setChecked(false);
  ui->deviationBox->setChecked(false);
  ui->sideEdit->clear();
  ui->sideEdit->insert(QString::number(0));
  ui->resEdit->clear();
  ui->resEdit->insert(QString::number(0.0));
  deviationFlag  = false;
  averageFlag = false;
  nestedFlag = true;
  dirty = false;
  isConfigured = false;
}

void healpixDialog::validate() {
  QString title, message;

  dirty = false;  // assume nothing has changed

  /* determine number of sides */
  int oldSides = nSides;
  nSides = ui->sideEdit->text().toInt();

  double decRes = 0.0, raRes = 0.0;
  if (dataAssoc->exists(fileType::InputData)) {
    raRes = dataAssoc->inputData()->RARes();
    decRes = dataAssoc->inputData()->DecRes();
  }
  else if (dataAssoc->exists(fileType::InputWeights)) {
    raRes = dataAssoc->inputWeights()->RARes();
    decRes = dataAssoc->inputWeights()->DecRes();
  }
  else {
    title = QString(tr("No input data or mask"));
    message = QString(tr("No input data set or data mask was found"));
    QMessageBox::critical(this,title,message);
    return;
  }

  double skyRes = (decRes >= raRes) ? decRes : raRes;
  double nyquest = skyRes / 3.0;
  int nyquestSides = sides(nyquest);
  double logSides = log(nyquestSides)/log(2);
  if (abs(logSides - (int)logSides) > SIDERES) {
    nyquestSides = std::pow(2,(int)logSides);
    nyquest = resolution(nyquestSides);
  }
  if (res < nyquest) {
    title = QString(tr("Resolution is below Nyquest sampling resolution"));
    message = QString(tr("The selected resolution is smaller than 1/3 of the selected sky resolution.\nDo you wish to replace it with %1?"))
                      .arg(nyquest);
    int result = QMessageBox::question(this,title,message,QMessageBox::Yes | QMessageBox::No,QMessageBox::Yes);
    if (result == QMessageBox::Yes) {
      res = nyquest;
      nSides = nyquestSides;
    }
  }

  if (nSides != oldSides)
    dirty = true;

  /* determine if data is to be averaged */
  bool oldAverageFlag = averageFlag;
  averageFlag = ui->averageBox->isChecked();
  if (averageFlag != oldAverageFlag)
    dirty = true;
  
  /* determine if deviations from the average are to be used */
  bool oldDeviationFlag = deviationFlag;
  deviationFlag = ui->deviationBox->isChecked();
  if (deviationFlag != oldDeviationFlag)
    dirty = true;
  
  /* determine if pixelization scheme is nested */
  bool oldNestedFlag = nestedFlag;
  nestedFlag = ui->nestedButton->isChecked();
  if (nestedFlag != oldNestedFlag)
    dirty = true;
  
  isConfigured = true;
  return;
}

void healpixDialog::syncSides() {
  QString title, message;

  int userSides = ui->sideEdit->text().toInt();
  double logSides = log(userSides)/log(2);
  if (abs(logSides - (int)logSides) > SIDERES) {
    int modSides = std::pow(2,(int)logSides);
    title = QString(tr("Invalid number of sides entered"));
    message = QString(tr("Number of sides must be a multiple of two\nWould you like to use %1 instead?")).arg(modSides);
    int result = QMessageBox::question(this,title,message,QMessageBox::Yes | QMessageBox::No,QMessageBox::Yes);
    if (result == QMessageBox::Yes)
      userSides = modSides;
    else {
      message = QString(tr("Please enter a valid number of sides"));
      QMessageBox::information(this,title,message);
      return;
    }
  }
  nSides = userSides;
  res = resolution(nSides);
  ui->resEdit->clear();
  ui->resEdit->insert(QString::number(res));
  repaint();
}

/*
void healpixDialog::syncResolution() {
  QString title, message;

  double userRes = ui->resEdit->text().toDouble();
  int userSides = std::sqrt(360.0/(3 * userRes * userRes));
  int modSides = userSides - userSides % 2;
  double modRes = std::sqrt(360.0/(3 * modSides * modSides));
  if (userSides %2 != 0) {
    title = QString(tr("Invalid resolution entered"));
    message = QString(tr("Resolution must result in the number of sides being a multiple of two\nWould you like to use %1 instead?")).arg(modRes);
    int result = QMessageBox::question(this,title,message,QMessageBox::Yes | QMessageBox::No,QMessageBox::Yes);
    if (result == QMessageBox::Yes)
      userRes = modRes;
    else {
      message = QString(tr("Please enter a valid resoltion"));
      QMessageBox::information(this,title,message);
      return;
    }
  }

  sides = std::sqrt(360.0/(3 * resolution * resolution));
  if (sides%2 != 0)
    sides -= sides%2;
  ui->sideEdit->insert(QString::number(sides));
}
*/

double healpixDialog::resolution(int sides) {
  double result = 360.0 / (sides * sqrt(12.0*M_PI));
  return(result);
}

int healpixDialog::sides(double resolution) {
  int result = (int)(360.0 / (resolution * sqrt(12.0*M_PI)));
  return result;
}

void healpixDialog::finalize() {
  validate(); //check and store selections
  dataAssoc->pixelizationEngineType(HealPIX);

  Q_EMIT pixelizeData();
  accept();
}

void healpixDialog::help() {

}

void healpixDialog::cancel() {
  QString title, message;
//  QMessageBox::StandardButton reply;

  if (dirty) {
    title = QString(tr("Pixelization parameters will be reset"));
    message = QString(tr("You have chosen to cancel after changing some parameters. These will be reset.\nThis will not affect any parameters stored in the pixelization engine"));
    QMessageBox::information(this,title,message);
    reset();
    dirty = false;
  }
  Q_EMIT pixelizationCancelled();
  close();
}
