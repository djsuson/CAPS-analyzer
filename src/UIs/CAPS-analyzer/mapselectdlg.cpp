/***************************************************************************
 *   mapselectdlg.cpp                                                      *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   suson@calumet.purdue.edu                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class defines the map select dialog structure associated with      *
 * the Qt4 user interface.                                                 *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#include "mapselectdlg.h"
#include "../libanalyzer/atypes.h"
#include "ui_mapselectdlg.h"

mapSelectDialog::mapSelectDialog(association *assoc) :
                 ui(new Ui::mapSelectDialog) {
  /* set up the user interface first */
  ui->setupUi(this);

  dataMgr = assoc;
  
  /* initialize internal variables*/
  mapType = associatedMap::Null;
  dirty = false;
  activeMaps = 0;
  
  /* enable all maps */
  ui->dataButton->setEnabled(true);
  ui->weightButton->setEnabled(true);
  ui->combinedDataButton->setEnabled(true);
  ui->pixelDataButton->setEnabled(true);
  ui->pixelWeightsButton->setEnabled(true);
  ui->combinedPixelButton->setEnabled(true);
  ui->pixelOccupancyButton->setEnabled(true);
  ui->inverseDataButton->setEnabled(true);
  ui->inverseWeightsButton->setEnabled(true);
  ui->combinedInverseButton->setEnabled(true);
  ui->noiseSkyButton->setEnabled(true);
  ui->filterSkyButton->setEnabled(true);
  ui->beamSkyButton->setEnabled(true);
  ui->noiseButton->setEnabled(true);
  ui->filterButton->setEnabled(true);
  ui->beamButton->setEnabled(true);
  ui->dataButton->setChecked(true);
   
  /* set up signals and slots */
  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &mapSelectDialog::finalize);
  connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &mapSelectDialog::cancel);
  connect(ui->buttonBox, &QDialogButtonBox::helpRequested, this, &mapSelectDialog::help);
}

mapSelectDialog::~mapSelectDialog() {
  delete ui;
}

void mapSelectDialog::validate() {
  dirty = false; // assume nothing has changed
  
  ASSOCIATEDMAP oldMapType = mapType;
  if (ui->dataButton->isChecked())
    mapType = associatedMap::InputDataMap;
  if (ui->weightButton->isChecked())
    mapType = associatedMap::InputWeightsMap;
  if (ui->combinedDataButton->isChecked())
    mapType = associatedMap::WeightedDataMap;
  if (ui->pixelDataButton->isChecked())
    mapType = associatedMap::PixelizedDataMap;
  if (ui->pixelWeightsButton->isChecked())
    mapType = associatedMap::PixelizedWeightsMap;
  if (ui->combinedPixelButton->isChecked())
    mapType = associatedMap::WeightedPixelMap;
  if (ui->pixelOccupancyButton->isChecked())
    mapType = associatedMap::PixelOccupancyMap;
  if (ui->inverseDataButton->isChecked())
    mapType = associatedMap::InverseDataMap;
  if (ui->inverseWeightsButton->isChecked())
    mapType = associatedMap::InverseWeightsMap;
  if (ui->combinedInverseButton->isChecked())
    mapType = associatedMap::WeightedInverseMap;
  if (ui->noiseSkyButton->isChecked())
    mapType = associatedMap::InputNoiseMap;
  if (ui->filterSkyButton->isChecked())
    mapType = associatedMap::InputFilterMap;
  if (ui->beamSkyButton->isChecked())
    mapType = associatedMap::InputBeamMap;
  if (ui->noiseButton->isChecked())
    mapType = associatedMap::PixelizedNoiseMap;
  if (ui->filterButton->isChecked())
    mapType = associatedMap::PixelizedFilterMap;
  if (ui->beamButton->isChecked())
    mapType = associatedMap::PixelizedBeamMap;

  if (mapType != oldMapType)
    dirty = true;
  
  return;
}

void mapSelectDialog::configure(unsigned int availableMaps) {
  dirty = false;
  activeMaps = availableMaps;
  
  ui->dataButton->setEnabled(false);
  ui->weightButton->setEnabled(false);
  ui->combinedDataButton->setEnabled(false);
  ui->pixelDataButton->setEnabled(false);
  ui->pixelWeightsButton->setEnabled(false);
  ui->combinedPixelButton->setEnabled(false);
  ui->pixelOccupancyButton->setEnabled(false);
  ui->inverseDataButton->setEnabled(false);
  ui->inverseWeightsButton->setEnabled(false);
  ui->combinedInverseButton->setEnabled(false);
  ui->noiseSkyButton->setEnabled(false);
  ui->beamSkyButton->setEnabled(false);
  ui->filterSkyButton->setEnabled(false);
  ui->noiseButton->setEnabled(false);
  ui->filterButton->setEnabled(false);
  ui->beamButton->setEnabled(false);
  ui->dataButton->setChecked(false);
  
  // run through maps backwards to find earliest data type in chain that exists
  ASSOCIATEDMAP mapType = associatedMap::ASSOCIATEDMAP_LIMIT;
  int type = static_cast<int>(mapType);
  
  while (mapType >  associatedMap::Null) { // run over graphable data types
    if (mapType == associatedMap::ASSOCIATEDMAP_LIMIT) {
      mapType = static_cast<ASSOCIATEDMAP>(--type);
      continue;
    }
    
    if (mapType == associatedMap::Null)
      break;
    
    switch (mapType) {
      case associatedMap::InputDataMap:
        if (dataMgr->exists(mapType)) {
          ui->dataButton->setEnabled(true);
          ui->dataButton->setChecked(true);
        }
        break;
      case associatedMap::InputWeightsMap:
        if (dataMgr->exists(mapType)) {
          ui->weightButton->setEnabled(true);
          ui->weightButton->setChecked(true);
        }
        break;
      case associatedMap::WeightedDataMap:
        if (dataMgr->exists(mapType)) {
          ui->combinedDataButton->setEnabled(true);
          ui->combinedDataButton->setChecked(true);
        }
        break;
      case associatedMap::PixelizedDataMap:
        if (dataMgr->exists(mapType)) {
          ui->pixelDataButton->setEnabled(true);
          ui->pixelDataButton->setChecked(true);
        }
        break;
      case associatedMap::PixelizedWeightsMap:
        if (dataMgr->exists(mapType)) {
          ui->pixelWeightsButton->setEnabled(true);
          ui->pixelWeightsButton->setChecked(true);
        }
        break;
      case associatedMap::WeightedPixelMap:
        if (dataMgr->exists(mapType)) {
          ui->combinedPixelButton->setEnabled(true);
          ui->combinedPixelButton->setChecked(true);
        }
        break;
      case associatedMap::PixelOccupancyMap:
        if (dataMgr->exists(mapType)) {
          ui->pixelOccupancyButton->setEnabled(true);
          ui->pixelOccupancyButton->setChecked(true);
        }
        break;
      case associatedMap::InverseDataMap:
        if (dataMgr->exists(mapType)) {
          ui->inverseDataButton->setEnabled(true);
          ui->inverseDataButton->setChecked(true);
        }
        break;
      case associatedMap::InverseWeightsMap:
        if (dataMgr->exists(mapType)) {
          ui->inverseWeightsButton->setEnabled(true);
          ui->inverseWeightsButton->setChecked(true);
        }
        break;
      case associatedMap::WeightedInverseMap:
        if (dataMgr->exists(mapType)) {
          ui->combinedInverseButton->setEnabled(true);
          ui->combinedInverseButton->setChecked(true);
        }
        break;
      case associatedMap::InputNoiseMap:
        if (dataMgr->exists(mapType)) {
          ui->noiseSkyButton->setEnabled(true);
          ui->noiseSkyButton->setChecked(true);
        }
        break;
      case associatedMap::InputFilterMap:
        if (dataMgr->exists(mapType)) {
          ui->filterSkyButton->setEnabled(true);
          ui->filterSkyButton->setChecked(true);
        }
        break;
      case associatedMap::InputBeamMap:
        if (dataMgr->exists(mapType)) {
          ui->beamSkyButton->setEnabled(true);
          ui->beamSkyButton->setChecked(true);
        }
      case associatedMap::PixelizedNoiseMap:
        if (dataMgr->exists(mapType)) {
          ui->noiseButton->setEnabled(true);
          ui->noiseButton->setChecked(true);
        }
        break;
      case associatedMap::PixelizedFilterMap:
        if (dataMgr->exists(mapType)) {
          ui->filterButton->setEnabled(true);
          ui->filterButton->setChecked(true);
        }
        break;
      case associatedMap::PixelizedBeamMap:
        if (dataMgr->exists(mapType)) {
          ui->beamButton->setEnabled(true);
          ui->beamButton->setChecked(true);
        }
        break;
    }
    mapType = static_cast<ASSOCIATEDMAP>(--type);
  }

  exec();
}

void mapSelectDialog::reset() {
  activeMaps = 0;
  mapType = associatedMap::Null;
  ui->dataButton->setEnabled(true);
  ui->weightButton->setEnabled(true);
  ui->combinedDataButton->setEnabled(true);
  ui->pixelDataButton->setEnabled(true);
  ui->pixelWeightsButton->setEnabled(true);
  ui->combinedPixelButton->setEnabled(true);
  ui->pixelOccupancyButton->setEnabled(true);
  ui->inverseDataButton->setEnabled(true);
  ui->inverseWeightsButton->setEnabled(true);
  ui->combinedInverseButton->setEnabled(true);
  ui->noiseSkyButton->setEnabled(true);
  ui->filterSkyButton->setEnabled(true);
  ui->beamSkyButton->setEnabled(true);
  ui->noiseButton->setEnabled(true);
  ui->filterButton->setEnabled(true);
  ui->beamButton->setEnabled(true);
  dirty = false;
}

void mapSelectDialog::finalize() {

  validate();
  Q_EMIT mapSelected(mapType);
  accept();
}

void mapSelectDialog::cancel() {
  if (dirty)
    dirty = false;
  close();
}

void mapSelectDialog::help() {

}
