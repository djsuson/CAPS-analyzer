/***************************************************************************
 *   mapperdlg.cpp                                                         *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   suson@calumet.purdue.edu                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class defines the mapper dialog structure associated with          *
 * the Qt4 user interface.                                                 *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#include "mapperdlg.h"
#include "ui_mapperdlg.h"

#include "../libgraphics/mapper.h"

mapperDialog::mapperDialog(association *assoc) :
              ui(new Ui::mapperDialog) {
  /* set up the user interface first */
  ui->setupUi(this);

  dataAssoc = assoc;

  /* initialize internal variables*/
//  currentHandle = -1;
  xSize = ySize = 0;
  projection = Blank;
  longConvention = NoOrientation;
  hue = Dark;
  dirty = false;
  isConfigured = false;
  
  /* disable map layouts that are not implemented yet */
  ui->gnomicButton->setEnabled(false);
  ui->atoffButton->setEnabled(false);
  
  /* set up signals and slots */
  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &mapperDialog::finalize);
  connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &mapperDialog::cancel);
  connect(ui->buttonBox, &QDialogButtonBox::helpRequested, this, &mapperDialog::help);
  connect(ui->customSizeButton, &QRadioButton::toggled, [=](bool value) {mapperDialog::activateCustom(value);});
}

mapperDialog::~mapperDialog() {
  delete ui;
}

void mapperDialog::configure() {
  dirty = false;
  if (isConfigured) {
    switch (xSize) {
      case 800:
        ui->smallSizeButton->setChecked(true);
        ui->heightLabel->setEnabled(false);
        ui->heightValue->setEnabled(false);
        ui->widthLabel->setEnabled(false);
        ui->widthValue->setEnabled(false);
        break;
      case 1024:
        ui->mediumSizeButton->setChecked(true);
        ui->heightLabel->setEnabled(false);
        ui->heightValue->setEnabled(false);
        ui->widthLabel->setEnabled(false);
        ui->widthValue->setEnabled(false);
        break;
      case 1280:
        ui->largeSizeButton->setChecked(true);
        ui->heightLabel->setEnabled(false);
        ui->heightValue->setEnabled(false);
        ui->widthLabel->setEnabled(false);
        ui->widthValue->setEnabled(false);
        break;
      default:
        ui->customSizeButton->setChecked(true);
        ui->heightLabel->setEnabled(true);
        ui->heightValue->setEnabled(true);
        ui->widthLabel->setEnabled(true);
        ui->widthValue->setEnabled(true);
        (ui->widthValue->text()).setNum(xSize);
        (ui->heightValue->text()).setNum(ySize);
        break;
    }

    if (projection == Mollweide)
      ui->mollweideButton->setChecked(true);
    if (projection == Atoff)
      ui->atoffButton->setChecked(true);
    if (projection == Gnomonic)
      ui->gnomicButton->setChecked(true);
    
    if (hue == Linear)
      ui->linearButton->setChecked(true);
    if (hue == Log)
      ui->logButton->setChecked(true);
    if (hue == SuperLog)
      ui->sLogButton->setChecked(true);

    if (longConvention == Astronomical)
      ui->astroButton->setChecked(true);
    if (longConvention == Terrestrial)
      ui->terrestrialButton->setChecked(true);
  }

  exec();
}

void mapperDialog::configure(bool triggered) {
  if (triggered)
    configure();
}

void mapperDialog::reset() {
  xSize = ySize = 0;
  projection = Blank;
  longConvention = NoOrientation;
  hue = Dark;
  ui->heightLabel->setEnabled(true);
  ui->heightValue->setEnabled(true);
  ui->widthLabel->setEnabled(true);
  ui->widthValue->setEnabled(true);
  dirty = false;
  isConfigured = false;
  
//  while (currentHandle >= 0) {
//    analyzer_mapmaker_release(currentHandle);
//    currentHandle--;
//  }
}

void mapperDialog::validate() {
  QString title, message;
  
  dirty = false; // assume nothing has changed
  
  /* set map size */
  long oldXSize = xSize;
  long oldYSize = ySize;
  if (ui->smallSizeButton->isChecked() && oldXSize != 800) {
    xSize = 800;
    ySize = 600;
    dirty = true;
  }
  if (ui->mediumSizeButton->isChecked() && oldXSize != 1024) {
    xSize = 1024;
    ySize = 768;
    dirty = true;
  }
  if (ui->largeSizeButton->isChecked() && oldXSize != 1280) {
    xSize = 1280;
    ySize = 960;
    dirty = true;
  }
  if (ui->customSizeButton->isChecked()) {
    xSize = (ui->widthValue->text()).toLong();
    ySize = (ui->heightValue->text()).toLong();
    if (xSize != oldXSize || ySize != oldYSize)
      dirty = true;
  }

  /* set map convention */
  ORIENTATION oldConvention = longConvention;
  if (ui->astroButton->isChecked())
    longConvention = Astronomical;
  if (ui->terrestrialButton->isChecked())
    longConvention = Terrestrial;
  if (longConvention != oldConvention)
    dirty = true;

  /* set color scheme */
  COLORSCHEME oldhue = hue;
  if (ui->linearButton->isChecked())
    hue = Linear;
  if (ui->logButton->isChecked())
    hue = Log;
  if (ui->sLogButton->isChecked())
    hue = SuperLog;
  if (hue != oldhue)
    dirty = true;

  /* set map layout */
  MAPTYPE oldProjection = projection;
  title = QString(tr("Map Layout Not Available"));
  message = QString(tr("This map layout is currently not available\nPlease let the developers know you would like this layout."));
  if (ui->gnomicButton->isChecked())
    QMessageBox::information(this,title,message);
  if (ui->atoffButton->isChecked())
    QMessageBox::information(this,title,message);
  if (ui->mollweideButton->isChecked()) {
    projection = Mollweide;
    if (projection != oldProjection)
      dirty = true;
  }
  
  isConfigured = true;
  return;
}

int mapperDialog::configureInterface() {
  QString title, message;
  
  // check to see if a graph manager already exists
  if (dataAssoc->exists(dataEngines::Mapping)) {
    QMessageBox::StandardButton reply;
    title = QString(tr("Replace current mapping engine?"));
    message = QString(tr("A mapping engine currently exists.\nDo you want to replace it?"));
    reply = QMessageBox::question(this,title,message,QMessageBox::Yes | QMessageBox::No,QMessageBox::No);
    if (reply == QMessageBox::Yes) {
      dataAssoc->reset(allTypes::Mapping);
      dataAssoc->addEngine(dataEngines::Mapping,projection);
    }
  }
  else
    dataAssoc->addEngine(dataEngines::Mapping,projection);

  return 0;
}

void mapperDialog::finalize() {
//  int err = 0;
  
  validate();
  configureInterface();
//  err = configureInterface();
//  if (err < 0)
//    cancel();
  
  if (!ui->customSizeButton->isChecked()) {
    ui->heightLabel->setEnabled(false);
    ui->heightValue->setEnabled(false);
    ui->widthLabel->setEnabled(false);
    ui->widthValue->setEnabled(false);
  }

  if (!dataAssoc->exists(dataEngines::Mapping))
    dataAssoc->addEngine(dataEngines::Mapping, projection);
  else
    dataAssoc->mappingEngine()->layout(projection);

  dataAssoc->mappingEngine()->width(xSize);
  dataAssoc->mappingEngine()->height(ySize);
  dataAssoc->mappingEngine()->orientation(longConvention);
  dataAssoc->mappingEngine()->colorScheme(hue);

  Q_EMIT mapperReady();
  accept();
}

void mapperDialog::help() {

}

void mapperDialog::activateCustom(bool check) {
  if (check) {
    ui->heightLabel->setEnabled(true);
    ui->heightValue->setEnabled(true);
    ui->widthLabel->setEnabled(true);
    ui->widthValue->setEnabled(true);
  }
  else {
    ui->heightLabel->setEnabled(false);
    ui->heightValue->setEnabled(false);
    ui->widthLabel->setEnabled(false);
    ui->widthValue->setEnabled(false);
  }
}

void mapperDialog::cancel() {
  QString title, message;
  QMessageBox::StandardButton reply;
  
  if (dirty) {
    title = QString(tr("Mapping parameters will be reset"));
    message = QString(tr("You have chosen to cancel after changing some parameters. These will be reset.\nThis will not affect any parameters stored in the mapping engine"));
    QMessageBox::information(this,title,message);
    reset();
    dirty = false;
  }
  Q_EMIT mapperCancelled();
  close();
}
