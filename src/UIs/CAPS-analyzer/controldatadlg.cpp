/***************************************************************************
 *   controldatadlg.cpp                                                    *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   suson@calumet.purdue.edu                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class defines the control data dialog structure associated with    *
 * the Qt4 user interface.                                                 *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#include "controldatadlg.h"
#include "ui_controldatadlg.h"

controlDataDialog::controlDataDialog(association *assoc) :
                   ui(new Ui::controlDataDialog) {

  // set up the user interface first
  ui->setupUi(this);

  // get access to association class
  dataAssoc = assoc;
  
  // set up signals and slots
  ui->stackedWidget->setCurrentIndex(0); //insure that blank widget is originally visual
  mapper = new QSignalMapper(this); //used to select appropriate stack widget for additional configuration
  
  /* set up signals and slots */
  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &controlDataDialog::finalize);
  connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &controlDataDialog::cancel);
  connect(ui->buttonBox, &QDialogButtonBox::clicked, [=](QAbstractButton* button) {controlDataDialog::addData(button);});
  connect(ui->buttonBox, &QDialogButtonBox::helpRequested, this, &controlDataDialog::help);

  connect(ui->uniformButton, &QRadioButton::clicked, [=](){changeStack(1);});
  connect(ui->regionalButton, &QRadioButton::clicked, [=](){changeStack(2);});
  connect(ui->deltaButton, &QRadioButton::clicked, [=](){changeStack(3);});
  connect(ui->gaussianButton, &QRadioButton::clicked, [=](){changeStack(4);});
  connect(ui->checkerButton, &QRadioButton::clicked, [=](){changeStack(5);});
  connect(ui->harmonicButton, &QRadioButton::clicked, [=](){changeStack(6);});

  // initialize internal variables
  dataSet = Empty;
  dataType = fileType::Null;
  peakDec = peakRA = 0.0;
  fwhm = 0.0;
  checkRA = checkDec = 0.0;
  l = m = 0;
  resRA = resDec = 0.0;
  signalStrength = 1.0;
  top = 90.0;
  bottom = -90.0;
  from = -180.0;
  to = 180.0;
  operation = Add;
  coords = RAdec;
  dirty = false;
  isConfigured = false;
  
  // set initially displayed values
  ui->decResolutionValue->setText(QString("%1").arg(resDec,0,'f',1));
  ui->RAResolutionValue->setText(QString("%1").arg(resRA,0,'f',1));
  ui->sigValue->setText(QString("%1").arg(signalStrength,0,'f',1));
  ui->dataButton->setChecked(true);
  ui->addButton->setChecked(true);
  changeStack(0);
}

controlDataDialog::~controlDataDialog() {
  delete ui;
  delete mapper;
}

void controlDataDialog::configure(bool open) {
    dirty = false;
  if (isConfigured) {
    (ui->decResolutionValue->text()).setNum(resDec);
    (ui->RAResolutionValue->text()).setNum(resRA);
    (ui->sigValue->text()).setNum(signalStrength);

    switch (dataType) {
      case fileType::InputData:
        ui->dataButton->setChecked(true);
        break;
      case fileType::InputWeights:
        ui->weightsButton->setChecked(true);
        break;
      case fileType::InputNoise:
        ui->noiseButton->setChecked(true);
        break;
      case fileType::InputFilter:
        ui->filterButton->setChecked(true);
        break;
      case fileType::InputBeam:
        ui->beamButton->setChecked(true);
    }
/*
    // disable data types that already exist
    if (dataAssoc->exists(fileType::InputData))
      ui->dataButton->setEnabled(false);
    else
      ui->dataButton->setEnabled(true);
    if (dataAssoc->exists(fileType::InputWeights))
      ui->weightsButton->setEnabled(false);
    else
      ui->weightsButton->setEnabled(true);
    if (dataAssoc->exists(fileType::InputNoise))
      ui->noiseButton->setEnabled(false);
    else
      ui->noiseButton->setEnabled(true);
    if (dataAssoc->exists(fileType::InputFilter))
      ui->filterButton->setEnabled(false);
    else
      ui->filterButton->setEnabled(true);
    if (dataAssoc->exists(fileType::InputBeam))
      ui->beamButton->setEnabled(false);
    else
      ui->beamButton->setEnabled(true);
*/

    switch (operation) {
      case Subtract:
        ui->subtractButton->setChecked(true);
        break;
      case Scale:
        ui->scaleButton->setChecked(true);
        break;
      case Replace:
        ui->replaceButton->setChecked(true);
        break;
      case Invert:
        ui->invertButton->setChecked(true);
        break;
      case Mirror:
        ui->mirrorButton->setChecked(true);
        break;
      case Add:
      default:
        ui->addButton->setChecked(true);
        break;
    }
    switch (dataSet) {
      case Empty:
        changeStack(0);
        break;
      case Uniform:
        ui->uniformButton->setChecked(true);
        changeStack(1);
        break;
      case Regional:
        ui->regionalButton->setChecked(true);
        (ui->regionTopValue->text()).setNum(top);
        (ui->regionBottomValue->text()).setNum(bottom);
        (ui->regionFromValue->text()).setNum(from);
        (ui->regionToValue->text()).setNum(to);
        changeStack(2);
        break;
      case Gaussian:
      case Delta:
        (ui->RAValue->text()).setNum(peakRA);
        (ui->decValue->text()).setNum(peakDec);
        if (dataSet == Delta) {
          ui->deltaButton->setChecked(true);
          (ui->fwhmValue->text()).setNum(0.0);
          changeStack(3);
        }
        if (dataSet == Gaussian) {
          ui->gaussianButton->setChecked(true);
          (ui->fwhmValue->text()).setNum(fwhm);
          changeStack(4);
        }
        break;
      case Checker:
        ui->checkerButton->setChecked(true);
        (ui->RAScaleValue->text()).setNum(checkRA);
        (ui->decScaleValue->text()).setNum(checkDec);
        changeStack(5);
        break;
      case Harmonic:
        ui->harmonicButton->setChecked(true);
        ui->lSpinner->setValue(l);
        ui->mSpinner->setValue(m);
        changeStack(6);
        break;
    }
  }
  if (!open)
    exec();
  else
    show();
}

void controlDataDialog::reset() {
  dataSet = Empty;
  ui->dataButton->setEnabled(true);
  ui->weightsButton->setEnabled(true);
  ui->noiseButton->setEnabled(true);
  ui->filterButton->setEnabled(true);
  ui->beamButton->setEnabled(true);
  ui->dataButton->setChecked(true);

  resRA = resDec = 0.0;
  ui->decResolutionLabel->setEnabled(true);
  ui->RAResolutionLabel->setEnabled(true);
  ui->decResolutionValue->setText(QString("%1").arg(resDec,0,'f',1));
  ui->RAResolutionValue->setText(QString("%1").arg(resRA,0,'f',1));
  coords = RAdec;
  ui->RADecButton->setChecked(true);

  signalStrength = 0.0;
  ui->sigLabel->setEnabled(true);
  ui->sigValue->setEnabled(true);
  ui->sigUnit->setEnabled(true);
  ui->sigValue->clear();
  ui->sigValue->setText(QString("%1").arg(signalStrength,0,'f',1));

  ui->stackedWidget->setCurrentIndex(0); //insure that blank widget is originally visual
  dataType = fileType::Null;
  ui->checkerButton->setChecked(false);
  ui->deltaButton->setChecked(false);
  ui->gaussianButton->setChecked(false);
  ui->harmonicButton->setChecked(false);
  ui->regionalButton->setChecked(false);
  ui->uniformButton->setChecked(false);
  top = 90.0;
  bottom = -90.0;
  from = -180.0;
  to = 180.0;
  ui->regionTopValue->setText(QString("%1").arg(top,0,'f',1));
  ui->regionBottomValue->setText(QString("%1").arg(bottom,0,'f',1));
  ui->regionFromValue->setText(QString("%1").arg(from,0,'f',1));
  ui->regionToValue->setText(QString("%1").arg(to,0,'f',1));
  peakDec = peakRA = 0.0;
  fwhm = 0.0;
  ui->RAValue->setText(QString("%1").arg(peakRA,0,'f',1));
  ui->decValue->setText(QString("%1").arg(peakDec,0,'f',1));
  ui->fwhmValue->setText(QString("%1").arg(fwhm,0,'f',1));
  checkRA = checkDec = 0.0;
  ui->RAScaleValue->setText(QString("%1").arg(checkRA,0,'f',1));
  ui->decScaleValue->setText(QString("%1").arg(checkDec,0,'f',1));
  l = m = 0;
  ui->lSpinner->setValue(l);
  ui->mSpinner->setValue(m);
  operation = Add;
  dirty = false;
  isConfigured = false;

  QString title, message, chainDesc;
  FILETYPE chain = fileType::InputData;
  int type = 1;

  while (chain < fileType::PixelizedData) {
    if (dataAssoc->maxDataSet((GENERICTYPE)chain) != noSky) {
      switch (chain) {
        case fileType::InputData:
          chainDesc = QString(tr("Data"));
          break;
        case fileType::InputWeights:
          chainDesc = QString(tr("Weight"));
          break;
        case fileType::InputNoise:
          chainDesc = QString(tr("Noise"));
          break;
        case fileType::InputFilter:
          chainDesc = QString(tr("Filter"));
          break;
        case fileType::InputBeam:
          chainDesc = QString(tr("Beam"));
          break;
      }
      title = QString(tr("%1 chain found")).arg(chainDesc);
      message = QString(tr("Elements of the %1 chain were found.\nDo you wish to reset these?")).arg(chainDesc);
      int result = QMessageBox::question(this,title,message,QMessageBox::Yes | QMessageBox::No,QMessageBox::Yes);
        if (result == QMessageBox::Yes)
          dataAssoc->discardRelation(chain);
    }
  chain = static_cast<fileType>(++type);
  }
}

bool controlDataDialog::validate() {
  dirty = false;  // assume nothing has changed
  bool error = false;
  QString title, message;
  
  // determine which type of data to be created
  FILETYPE oldDataType = dataType;
  if (ui->dataButton->isChecked())
    dataType = fileType::InputData;
  if (ui->weightsButton->isChecked())
    dataType = fileType::InputWeights;
  if (ui->noiseButton->isChecked())
    dataType = fileType::InputNoise;
  if (ui->filterButton->isChecked())
    dataType = fileType::InputFilter;
  if (ui->beamButton->isChecked())
    dataType = fileType::InputBeam;
  if (dataType != oldDataType)
    dirty = true;

  // disable data types that already exist
  if (dataAssoc->exists(fileType::InputData))
    ui->dataButton->setEnabled(false);
  else
    ui->dataButton->setEnabled(true);
  if (dataAssoc->exists(fileType::InputWeights))
    ui->weightsButton->setEnabled(false);
  else
    ui->weightsButton->setEnabled(true);
  if (dataAssoc->exists(fileType::InputNoise))
    ui->noiseButton->setEnabled(false);
  else
    ui->noiseButton->setEnabled(true);
  if (dataAssoc->exists(fileType::InputFilter))
    ui->filterButton->setEnabled(false);
  else
    ui->filterButton->setEnabled(true);
  if (dataAssoc->exists(fileType::InputBeam))
    ui->beamButton->setEnabled(false);
  else
    ui->beamButton->setEnabled(true);

    /* get and set resolution */
  if (ui->RAResolutionValue->isEnabled()) {
    double oldResRA = resRA;
    double oldResDec = resDec;
    resRA = (ui->RAResolutionValue->text()).toDouble();
    resDec = (ui->decResolutionValue->text()).toDouble();
    if (resDec <= 0.0 && !error) {
      title = QString(tr("Invalid Dec resolution"));
      message = QString(tr("You entered an invalid declination resolution. It must be a value greater than 0.0\nPlease re-enter the value."));
      QMessageBox::warning(this,title,message);
      error = true;
    }
    if (resRA <= 0.0 && !error) {
      title = QString(tr("Invalid RA resolution"));
      message = QString(tr("You entered an invalid right ascension resolution. It must be a value greater than 0.0\nPlease re-enter the value."));
      QMessageBox::warning(this,title,message);
      error = true;
    }
    if ((resRA != oldResRA) || (resDec != oldResDec)) {
      if (!error) {
        ui->RAResolutionLabel->setEnabled(false);
        ui->RAResolutionValue->setEnabled(false);
        ui->decResolutionLabel->setEnabled(false);
        ui->decResolutionValue->setEnabled(false);
      }
      dirty = true;
    }
  }
  /* get and set coordinate system */
  COORDSYSTEM oldCoords = coords;
  if (ui->RADecButton->isChecked())
    coords = RAdec;
  if (ui->galLatLongButton->isChecked())
    coords = galLatLong;
  if (ui->earthLatLongButton->isChecked())
    coords = terrLatLong;
  if (oldCoords != coords)
    dirty = true;
  
  /* determine which data set is to be created */
  dataSet = Empty;
  CONTROLTYPE oldDataSet = dataSet;
  if (ui->uniformButton->isChecked())
    dataSet = Uniform;
  if (ui->regionalButton->isChecked())
    dataSet = Regional;
  if (ui->gaussianButton->isChecked())
    dataSet = Gaussian;
  if (ui->harmonicButton->isChecked())
    dataSet = Harmonic;
  if (ui->deltaButton->isChecked())
    dataSet = Delta;
  if (ui->checkerButton->isChecked())
    dataSet = Checker;
  if (dataSet == Empty && !error) {
    title = QString(tr("No data type selected"));
    message = QString(tr("You must select a data structure to create.\nPlease select a data structure.\n You may add more by using the add button. Select OK when you are finished."));
    QMessageBox::warning(this,title,message);
    error = true;
  }
  if (oldDataSet != dataSet)
    dirty = true;

  /* get signal strength */
  double oldSignalStrength = signalStrength;
  signalStrength = (ui->sigValue->text()).toDouble();
  if (signalStrength < 0.0 && !error) {
    title = QString(tr("Invalid Signal Strength"));
    message = QString(tr("You entered an invalid signal strength. It cannot have a value less than 0.0\nPlease re-enter the value."));
    QMessageBox::warning(this,title,message);
    error = true;
  }
  if (oldSignalStrength != signalStrength)
    dirty = true;
  
  /* get operation type */
  M_OP oldOp = operation;
  if (ui->addButton->isChecked())
    operation = Add;
  if (ui->subtractButton->isChecked())
    operation = Subtract;
  if (ui->scaleButton-> isChecked())
    operation = Scale;
  if (ui->replaceButton->isChecked())
    operation = Replace;
  if (ui->invertButton->isChecked())
    operation = Invert;
  if (ui->mirrorButton->isChecked())
    operation = Mirror;
  if (oldOp != operation)
    dirty = true;
  
  /* get supplementary information, as necessary */
  double oldTop = 0.0, oldBottom = 0.0, oldFrom = 0.0, oldTo = 0.0;
  double oldFwhm = 0.0, oldPeakRA = 0.0, oldPeakDec = 0.0;
  double oldCheckRA = 0.0, oldCheckDec = 0.0;
  long oldL = 0, oldM = 0;
  switch (dataSet) {
  case Regional:
    oldTop = top;
    oldBottom = bottom;
    oldFrom = from;
    oldTo = to;
    top = (ui->regionTopValue->text()).toDouble();
    bottom = (ui->regionBottomValue->text()).toDouble();
    from = (ui->regionFromValue->text()).toDouble();
    to = (ui->regionToValue->text()).toDouble();
    if ((top < -90.0 || top > 90.0 || top <= bottom) && !error) {
      title = QString(tr("Invalid Top Value"));
      message = QString(tr("You entered an invalid angle for the top of the region. It must be a value between -90.0 and +90.0, and greater than the bottom angle.\nPlease re-enter the value."));
      QMessageBox::warning(this,title,message);
      error = true;
    }
    if ((bottom < -90.0 || bottom > 90.0 || top <= bottom) && !error) {
      title = QString(tr("Invalid Bottom Value"));
      message = QString(tr("You entered an invalid angle for the bottom of the region. It must be a value between -90.0 and +90.0, and less than the top angle.\nPlease re-enter the value."));
      QMessageBox::warning(this,title,message);
      error = true;
    }
    if ((from < -180.0 || from > 180.0 || to <= from) && !error) {
      title = QString(tr("Invalid From Value"));
      message = QString(tr("You entered an invalid angle for the beginning RA of the region. It must be a value between -180.0 and +180.0, and less than the ending RA angle.\nPlease re-enter the value."));
      QMessageBox::warning(this,title,message);
      error = true;
    }
    if ((to < -180.0 || to > 180.0 || to <= from) && !error) {
      title = QString(tr("Invalid To Value"));
      message = QString(tr("You entered an invalid angle for the ending RA of the region. It must be a value between -180.0 and +180.0, and greater than the beginning angle.\nPlease re-enter the value."));
      QMessageBox::warning(this,title,message);
      error = true;
    }
    if (oldTop != top || oldBottom != bottom || oldFrom != from || oldTo != to) 
      dirty = true;
    break;
  case Delta:
  case Gaussian:
    fwhm = (ui->fwhmValue->text()).toDouble();
    if (dataSet == Delta)
      fwhm = 0.0;
    peakRA = (ui->RAValue->text()).toDouble();
    peakDec = (ui->decValue->text()).toDouble();
    if ((peakRA < - 180.0 || peakRA > 180.0) && !error) {
      title = QString(tr("Invalid Peak Right Ascension"));
      message = QString(tr("You entered an invalid RA location for the peak. It must be a value between -180.0 and +180.0.\nPlease re-enter the value."));
      QMessageBox::warning(this,title,message);
      error = true;
    }
    if ((peakDec < -90.0 || peakDec > 90.0) && !error) {
      title = QString(tr("Invalid Peak Declinatin"));
      message = QString(tr("You entered an invalid declination angle for the peak. It must be a value between -90.0 and +90.0.\nPlease re-enter the value."));
      QMessageBox::warning(this,title,message);
      error = true;
    }
    if (oldFwhm != fwhm || oldPeakRA != peakRA || oldPeakDec != peakDec)
      dirty = true;
    break;
  case Checker:
    checkRA = (ui->RAScaleValue->text()).toDouble();
    checkDec = (ui->decScaleValue->text()).toDouble();
    if (oldCheckRA != checkRA || oldCheckDec != checkDec)
      dirty = true;
    break;
  case Harmonic:
    l = ui->lSpinner->value();
    m = ui->mSpinner->value();
    if (m > l)
      m = l;
    if (oldM != m || oldL != l)
      dirty = true;
    break;
  case Uniform:
  default:
    if (oldSignalStrength != signalStrength)
      dirty = true;
    break;
  }

  if (error)
    return false;
  else {
    isConfigured = true;
    return true;
  }
}

void controlDataDialog::addData(QAbstractButton* button) {
  QDialogButtonBox::StandardButton stdButton = ui->buttonBox->standardButton(button);
  if (stdButton == QDialogButtonBox::Apply) {
    bool success = validate();
    if (success) {
      // configure dialog box settings for continued use
      ui->RAResolutionValue->setEnabled(false);
      ui->decResolutionValue->setEnabled(false);
      ui->RADecButton->setEnabled(false);
      ui->galLatLongButton->setEnabled(false);
      ui->earthLatLongButton->setEnabled(false);

      repaint();
      Q_EMIT buildControlData(dataType,false);
    }
    else
      return;
  }
}

void controlDataDialog::finalize() {
  bool success = validate();
  if (success) {
    /* configure dialog box settings for next use */
    ui->RAResolutionValue->setEnabled(true);
    ui->decResolutionValue->setEnabled(true);
    ui->RADecButton->setEnabled(true);
    ui->galLatLongButton->setEnabled(true);
    ui->earthLatLongButton->setEnabled(true);
    accept();
    Q_EMIT buildControlData(dataType,true);
  }
  else
    return;
}

void controlDataDialog::help()
{

}

void controlDataDialog::changeStack(int frame)
{
  ui->sigLabel->setEnabled(true);
  ui->sigValue->setEnabled(true);
  ui->sigUnit->setEnabled(true);
  ui->fwhmLabel->setEnabled(true);
  ui->fwhmValue->setEnabled(true);
  ui->fwhmUnit->setEnabled(true);
  switch(frame) {
    case 0:  // empty set
      ui->sigLabel->setEnabled(false);
      ui->sigValue->setEnabled(false);
      ui->sigUnit->setEnabled(false);
    case 1:  // uniform set
      ui->stackedWidget->setCurrentIndex(0);
      break;
    case 2:  // uniform region
      ui->stackedWidget->setCurrentIndex(1);
      break;
    case 3:  // delta function
      ui->fwhmLabel->setEnabled(false);
      ui->fwhmValue->setEnabled(false);
      ui->fwhmUnit->setEnabled(false);
    case 4:  // gaussian function
      ui->stackedWidget->setCurrentIndex(2);
      break;
    case 5:  // checkerboard pattern
      ui->stackedWidget->setCurrentIndex(3);
      break;
    case 6:  // specific spherical harmonic
      ui->stackedWidget->setCurrentIndex(4);
      break;
  };
}

void controlDataDialog::cancel() {
  QString title, message;
  QMessageBox::StandardButton reply;
  
  if (dirty) {
    title = QString(tr("Data set partially created"));
    message = QString(tr("You have already begun creating a %1 data set.\nDo you really want to quit?"))
                      .arg(QString::fromStdString(dataAssoc->dataNames((int)dataType)));
    reply = QMessageBox::warning(this,title,message,QMessageBox::Yes | QMessageBox::No,QMessageBox::No);
    if (reply == QMessageBox::No)
      return;
    dataAssoc->reset((allTypes)dataType);
//    analyzer_instance_release(currentHandle);
    dirty = false;
  }
  Q_EMIT dataCreationCancelled();
  close();
}
